# Five-Button Control with Display
# Joe Pardue 2/1/25

# Modified from Eight-Button Control with Display
# Joe Pardue 1/4/25 (Modified for internal pull-ups)

import board
import digitalio
import time
from adafruit_ssd1306 import SSD1306_I2C

# Define GPIO pins for buttons
BUTTON_PINS = [
    board.GP6,  # Button 1
    board.GP7,  # Button 2
    board.GP8,  # Button 3
    board.GP9,  # Button 4
    board.GP10, # Button 5
]
LED_PIN = board.LED  # Onboard LED

# Set up buttons as inputs with pull-up resistors
buttons = []
for pin in BUTTON_PINS:
    button = digitalio.DigitalInOut(pin)
    button.direction = digitalio.Direction.INPUT
    button.pull = digitalio.Pull.UP  # Use internal pull-ups
    buttons.append(button)

# Set up the onboard LED as an output
led = digitalio.DigitalInOut(LED_PIN)
led.direction = digitalio.Direction.OUTPUT

# Initialize I2C and OLED display
i2c = board.STEMMA_I2C()  # Use the STEMMA I2C interface
display = SSD1306_I2C(128, 64, i2c, addr=0x3D)

# Clear the display initially
display.fill(0)
display.show()

# Store previous button states to minimize display updates
prev_states = [None] * len(BUTTON_PINS)

# Function to update the display only when necessary
def update_display(states):
    global prev_states
    if states != prev_states:  # Update only if states have changed
        display.fill(0)  # Clear display
        for i, state in enumerate(states):
            y_offset = i * 5  # Move to the next line
            display.text(f"Btn {i+1}: {'Released' if not state else 'Pressed'}", 0, y_offset, 1)
        display.show()  # Update the display
        prev_states = states[:]  # Save the current states

# Main loop
while True:
    # Read all button states (invert logic since pull-ups are active)
    button_states = [not button.value for button in buttons]

    # Update display only if states have changed
    update_display(button_states)

    # Minimal delay to reduce CPU load without impacting responsiveness
    time.sleep(0.005)  # 5 ms delay

